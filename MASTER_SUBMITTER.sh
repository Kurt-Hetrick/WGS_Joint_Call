#! /bin/bash

PROJECT=$1
SAMPLE_SHEET=$2
PREFIX=$3
# NUMBER_OF_BED_FILES=$4
# if [[ $NUMBER_OF_BED_FILES -lt 500 ]]
# 	then
# 	NUMBER_OF_BED_FILES=500
# fi

module load datamash

QUEUE_LIST=`qstat -f -s r | egrep -v "^[0-9]|^-|^queue" | cut -d @ -f 1 | sort | uniq | egrep -v "bigmem.q|all.q|cgc.q|programmers.q|uhoh.q|rhel7.q|lemon.q" | datamash collapse 1 | awk '{print "-q",$1}'`

##############FIXED DIRECTORIES###############

SCRIPT_DIR="/isilon/sequencing/Kurt/GIT_REPO/WGS_Joint_Call/Scripts"
JAVA_1_7="/isilon/sequencing/Kurt/Programs/Java/jdk1.7.0_25/bin"
JAVA_1_8="/isilon/sequencing/Kurt/Programs/Java/jdk1.8.0_73/bin"
CORE_PATH="/isilon/sequencing/Seq_Proj/"
BEDTOOLS_DIR="/isilon/sequencing/Kurt/Programs/PATH"
GATK_DIR="/isilon/sequencing/CIDRSeqSuiteSoftware/gatk/GATK_3/GenomeAnalysisTK-3.3-0"
GATK_3_1_1_DIR="/isilon/sequencing/CIDRSeqSuiteSoftware/gatk/GATK_3/GenomeAnalysisTK-3.1-1"
GATK_DIR_NIGHTLY="/isilon/sequencing/CIDRSeqSuiteSoftware/gatk/GATK_3/GenomeAnalysisTK-nightly-2015-01-15-g92376d3"
GATK_3_6_DIR="/isilon/sequencing/CIDRSeqSuiteSoftware/gatk/GATK_3/GenomeAnalysisTK-3.6"
GATK_3_7_DIR="/isilon/cgc/PROGRAMS/GenomeAnalysisTK-3.7"
SAMTOOLS_DIR="/isilon/sequencing/Kurt/Programs/samtools/samtools-0.1.18/"
TABIX_DIR="/isilon/sequencing/Kurt/Programs/TABIX/tabix-0.2.6/"
JAVA_CIDRSEQSUITE="/isilon/sequencing/CIDRSeqSuiteSoftware/java/jre1.7.0_45/bin"
CIDRSEQSUITE_6_1_1_DIR="/isilon/sequencing/CIDRSeqSuiteSoftware/RELEASES/6.1.1"

##############FIXED FILE PATHS################

KEY="/isilon/sequencing/CIDRSeqSuiteSoftware/gatk/GATK_2/lee.watkins_jhmi.edu.key"
HAPMAP_VCF="/isilon/sequencing/GATK_resource_bundle/2.5/b37/hapmap_3.3.b37.vcf"
OMNI_VCF="/isilon/sequencing/GATK_resource_bundle/2.5/b37/1000G_omni2.5.b37.vcf"
ONEKG_SNPS_VCF="/isilon/sequencing/GATK_resource_bundle/2.5/b37/1000G_phase1.snps.high_confidence.b37.vcf"
DBSNP_138_VCF="/isilon/sequencing/GATK_resource_bundle/2.8/b37/dbsnp_138.b37.vcf"
ONEKG_INDELS_VCF="/isilon/sequencing/GATK_resource_bundle/2.2/b37/Mills_and_1000G_gold_standard.indels.b37.vcf"
P3_1KG="/isilon/sequencing/1000genomes/Full_Project/Sep_2014/20130502/ALL.wgs.phase3_shapeit2_mvncall_integrated_v5.20130502.sites.vcf.gz"
ExAC="/isilon/sequencing/ExAC/Release_0.3/ExAC.r0.3.sites.vep.vcf.gz"
KNOWN_SNPS="/isilon/sequencing/GATK_resource_bundle/2.8/b37/dbsnp_138.b37.excluding_sites_after_129.vcf"
VERACODE_CSV="/isilon/sequencing/CIDRSeqSuiteSoftware/resources/Veracode_hg18_hg19.csv"
DBSNP_129="/isilon/sequencing/GATK_resource_bundle/2.8/b37/dbsnp_138.b37.excluding_sites_after_129.vcf"
NO_GAP_BED="/isilon/sequencing/CIDRSeqSuiteSoftware/RELEASES/5.0.0/aux_files/grch37.nogap.nochr.bed"
VERACODE="/isilon/sequencing/CIDRSeqSuiteSoftware/resources/Veracode_hg18_hg19.csv"
CODING_BED="/isilon/sequencing/CIDRSeqSuiteSoftware/RELEASES/5.0.0/aux_files/UCSC_hg19_CodingOnly_083013_MERGED_noContigs_noCHR.bed"
CYTOBAND_BED="/isilon/sequencing/Kurt/CGC/GRCh37.Cytobands.bed"
CODING_BED_MT="/isilon/sequencing/CIDRSeqSuiteSoftware/RELEASES/5.0.0/aux_files/MT.coding.bed"

GATK_KEY="/isilon/sequencing/CIDRSeqSuiteSoftware/gatk/GATK_2/lee.watkins_jhmi.edu.key"

############################################################################
#################Start of Combine Gvcf Functions############################
############################################################################

CREATE_PROJECT_INFO_ARRAY ()
{
PROJECT_INFO_ARRAY=(`sed 's/\r//g' $SAMPLE_SHEET | awk 'BEGIN{FS=","} NR>1 {print $1,$12,$18,$16}' | sed 's/,/\t/g' | sort -k 1,1 | awk '$1=="'$PROJECT'" {print $1,$2,$3,$4}' | sort | uniq`)

PROJECT_NAME=${PROJECT_INFO_ARRAY[0]}
REF_GENOME=${PROJECT_INFO_ARRAY[1]}
PROJECT_DBSNP=${PROJECT_INFO_ARRAY[2]}
PROJECT_BAIT_BED=${PROJECT_INFO_ARRAY[3]}
}

CREATE_GVCF_LIST(){
TOTAL_SAMPLES=(`awk 'BEGIN{FS=","} NR>1{print $1,$8}' $SAMPLE_SHEET | sort | uniq | wc -l`)
awk 'BEGIN{FS=","} NR>1{print $1,$8}' $SAMPLE_SHEET | sort | uniq | awk 'BEGIN{OFS="/"}{print "'$CORE_PATH'",$1,"GVCF",$2".g.vcf.gz"}' \
>| $CORE_PATH'/'$PROJECT'/'$TOTAL_SAMPLES'.samples.gvcf.list'
GVCF_LIST=(`echo $CORE_PATH'/'$PROJECT'/'$TOTAL_SAMPLES'.samples.gvcf.list'`)
}

FORMAT_AND_SCATTER_BAIT_BED() {
BED_FILE_PREFIX=(`echo SPLITTED_BED_FILE_`)

awk 1 $PROJECT_BAIT_BED | sed -r 's/\r//g ; s/chr//g ; s/[[:space:]]+/\t/g' >| $CORE_PATH/$PROJECT/TEMP/BED_FILE_SPLIT/FORMATTED_BED_FILE.bed
(awk '$1~/^[0-9]/' $CORE_PATH/$PROJECT/TEMP/BED_FILE_SPLIT/FORMATTED_BED_FILE.bed | sort -k1,1n -k2,2n ; \
awk '$1=="X"' $CORE_PATH/$PROJECT/TEMP/BED_FILE_SPLIT/FORMATTED_BED_FILE.bed | sort -k 2,2n ; \
awk '$1=="Y"' $CORE_PATH/$PROJECT/TEMP/BED_FILE_SPLIT/FORMATTED_BED_FILE.bed | sort -k 2,2n ; \
awk '$1=="MT"' $CORE_PATH/$PROJECT/TEMP/BED_FILE_SPLIT/FORMATTED_BED_FILE.bed | sort -k 2,2n) \
>| $CORE_PATH/$PROJECT/TEMP/BED_FILE_SPLIT/FORMATTED_AND_SORTED_BED_FILE.bed

# Determining how many records will be in each mini-bed file.  The +1 at the end is to round up the number of records per mini-bed file to ensure all records are captured.  So the last mini-bed file will be smaller.
# INTERVALS_DIVIDED=`wc -l $CORE_PATH/$PROJECT/TEMP/BED_FILE_SPLIT/FORMATTED_AND_SORTED_BED_FILE.bed | awk '{print $1}'`

split -l 1 -a 4 -d $CORE_PATH/$PROJECT/TEMP/BED_FILE_SPLIT/FORMATTED_AND_SORTED_BED_FILE.bed $CORE_PATH/$PROJECT/TEMP/BED_FILE_SPLIT/$BED_FILE_PREFIX

ls $CORE_PATH/$PROJECT/TEMP/BED_FILE_SPLIT/$BED_FILE_PREFIX* | awk '{print "mv",$0,$0".bed"}' | bash
}

COMBINE_GVCF(){
echo \
 qsub $QUEUE_LIST \
 -N 'A01_COMBINE_GVCF_'$PROJECT'_'$BED_FILE_NAME \
 -j y -o $CORE_PATH/$PROJECT/LOGS/A01_COMBINE_GVCF_$BED_FILE_NAME.log \
 $SCRIPT_DIR/A01_COMBINE_GVCF.sh \
 $JAVA_1_7 $GATK_DIR $REF_GENOME \
 $KEY $CORE_PATH $PROJECT_NAME $GVCF_LIST \
 $PREFIX $BED_FILE_NAME
 }

GENOTYPE_GVCF(){
echo \
 qsub $QUEUE_LIST \
 -N B02_GENOTYPE_GVCF_$PROJECT'_'$BED_FILE_NAME \
 -hold_jid A01_COMBINE_GVCF_$PROJECT'_'$BED_FILE_NAME \
 -j y -o $CORE_PATH/$PROJECT/LOGS/B02_GENOTYPE_GVCF_$BED_FILE_NAME.log \
 $SCRIPT_DIR/B02_GENOTYPE_GVCF.sh \
 $JAVA_1_7 $GATK_DIR $REF_GENOME \
 $KEY $CORE_PATH $PROJECT_NAME \
 $PREFIX $BED_FILE_NAME
}

VARIANT_ANNOTATOR(){
echo \
 qsub $QUEUE_LIST \
 -N C03_VARIANT_ANNOTATOR_$PROJECT'_'$BED_FILE_NAME \
 -hold_jid B02_GENOTYPE_GVCF_$PROJECT'_'$BED_FILE_NAME \
 -j y -o $CORE_PATH/$PROJECT/LOGS/C03_VARIANT_ANNOTATOR_$BED_FILE_NAME.log \
 $SCRIPT_DIR/C03_VARIANT_ANNOTATOR.sh \
 $JAVA_1_7 $GATK_DIR $REF_GENOME \
 $KEY $CORE_PATH $PROJECT_NAME \
 $PREFIX $BED_FILE_NAME $PROJECT_DBSNP
}

##############################################################################
#####################End of Combine Gvcf Functions############################
##############################################################################

##############################################################################
##################Start of VQSR and Refinement Functions######################
##############################################################################

GENERATE_CAT_VARIANTS_HOLD_ID(){
CAT_VARIANTS_HOLD_ID=$CAT_VARIANTS_HOLD_ID'C03_VARIANT_ANNOTATOR_'$PROJECT'_'$BED_FILE_NAME','
}

CAT_VARIANTS(){
echo \
 qsub $QUEUE_LIST \
 -N D04_CAT_VARIANTS_$PROJECT \
 -hold_jid $CAT_VARIANTS_HOLD_ID \
 -j y -o $CORE_PATH/$PROJECT/LOGS/D04_CAT_VARIANTS.log \
 $SCRIPT_DIR/D04_CAT_VARIANTS.sh \
 $JAVA_1_7 $GATK_DIR $REF_GENOME \
 $CORE_PATH $PROJECT_NAME $PREFIX
 }

VARIANT_RECALIBRATOR_SNV() {
echo \
 qsub $QUEUE_LIST \
 -N E05A_VARIANT_RECALIBRATOR_SNV_$PROJECT \
 -hold_jid D04_CAT_VARIANTS_$PROJECT \
 -j y -o $CORE_PATH/$PROJECT/LOGS/E05A_VARIANT_RECALIBRATOR_SNV.log \
 $SCRIPT_DIR/E05A_VARIANT_RECALIBRATOR_SNV.sh \
 $JAVA_1_7 $GATK_DIR $KEY $REF_GENOME $HAPMAP_VCF $OMNI_VCF $ONEKG_SNPS_VCF $DBSNP_138_VCF \
 $CORE_PATH $PROJECT_NAME $PREFIX
}

VARIANT_RECALIBRATOR_INDEL() {
echo \
 qsub $QUEUE_LIST \
 -N E05B_VARIANT_RECALIBRATOR_INDEL_$PROJECT \
 -hold_jid D04_CAT_VARIANTS_$PROJECT \
 -j y -o $CORE_PATH/$PROJECT/LOGS/E05B_VARIANT_RECALIBRATOR_INDEL.log \
 $SCRIPT_DIR/E05B_VARIANT_RECALIBRATOR_INDEL.sh \
 $JAVA_1_7 $GATK_DIR $KEY $REF_GENOME $ONEKG_INDELS_VCF \
 $CORE_PATH $PROJECT_NAME $PREFIX
}

APPLY_RECALIBRATION_SNV(){
echo \
 qsub $QUEUE_LIST \
 -N F06_APPLY_RECALIBRATION_SNV_$PROJECT \
 -hold_jid E05A_VARIANT_RECALIBRATOR_SNV_$PROJECT \
 -j y -o $CORE_PATH/$PROJECT/LOGS/F06_APPLY_RECALIBRATION_SNV.log \
 $SCRIPT_DIR/F06_APPLY_RECALIBRATION_SNV.sh \
 $JAVA_1_7 $GATK_DIR $REF_GENOME \
 $CORE_PATH $PROJECT_NAME $PREFIX
}

APPLY_RECALIBRATION_INDEL(){
echo \
 qsub $QUEUE_LIST \
 -N G07_APPLY_RECALIBRATION_INDEL_$PROJECT \
 -hold_jid F06_APPLY_RECALIBRATION_SNV_$PROJECT','E05B_VARIANT_RECALIBRATOR_INDEL_$PROJECT \
 -j y -o $CORE_PATH/$PROJECT/LOGS/G07_APPLY_RECALIBRATION_INDEL.log \
 $SCRIPT_DIR/G07_APPLY_RECALIBRATION_INDEL.sh \
 $JAVA_1_7 $GATK_DIR $REF_GENOME \
 $CORE_PATH $PROJECT_NAME $PREFIX
}

CALCULATE_GENOTYPE_POSTERIORS(){
echo \
 qsub $QUEUE_LIST \
 -N H08B_CALCULATE_GENOTYPE_POSTERIORS_$PROJECT \
 -hold_jid G07_APPLY_RECALIBRATION_INDEL_$PROJECT \
 -j y -o $CORE_PATH/$PROJECT/LOGS/H08B_CALCULATE_GENOTYPE_POSTERIORS.log \
 $SCRIPT_DIR/H08B_CALCULATE_GENOTYPE_POSTERIORS.sh \
 $JAVA_1_7 $GATK_DIR_NIGHTLY $KEY $REF_GENOME $P3_1KG $ExAC \
 $CORE_PATH $PROJECT_NAME $PREFIX
}

VARIANT_ANNOTATOR_REFINED(){
echo \
 qsub $QUEUE_LIST \
 -N I09_VARIANT_ANNOTATOR_REFINED_$PROJECT \
 -hold_jid H08B_CALCULATE_GENOTYPE_POSTERIORS_$PROJECT \
 -j y -o $CORE_PATH/$PROJECT/LOGS/I09_VARIANT_ANNOTATOR_REFINED.log \
 $SCRIPT_DIR/I09_VARIANT_ANNOTATOR_REFINED.sh \
 $JAVA_1_7 $GATK_DIR $KEY $REF_GENOME $PROJECT_DBSNP \
 $CORE_PATH $PROJECT_NAME $PREFIX
}

###########################################################################
#################End of VQSR and Refinement Functions######################
###########################################################################

##########################################################################
######################End of Functions####################################
##########################################################################

## Check to see if bed file directory has been created from a previous run.  If so, remove it to not interfere with current run ##
if [ -d $CORE_PATH/$PROJECT/TEMP/BED_FILE_SPLIT ]
then
	rm -rf $CORE_PATH/$PROJECT/TEMP/BED_FILE_SPLIT
fi

mkdir -p $CORE_PATH/$PROJECT/TEMP/BED_FILE_SPLIT
mkdir -p $CORE_PATH/$PROJECT/TEMP/AGGREGATE

CREATE_PROJECT_INFO_ARRAY
FORMAT_AND_SCATTER_BAIT_BED
CREATE_GVCF_LIST

for BED_FILE in $(ls $CORE_PATH/$PROJECT/TEMP/BED_FILE_SPLIT/SPLITTED_BED_FILE*);
 do
BED_FILE_NAME=$(basename $BED_FILE .bed)
COMBINE_GVCF
echo sleep 1s
GENOTYPE_GVCF
echo sleep 1s
VARIANT_ANNOTATOR
echo sleep 1s
GENERATE_CAT_VARIANTS_HOLD_ID
 done

CAT_VARIANTS
VARIANT_RECALIBRATOR_SNV
VARIANT_RECALIBRATOR_INDEL
APPLY_RECALIBRATION_SNV
APPLY_RECALIBRATION_INDEL
CALCULATE_GENOTYPE_POSTERIORS
VARIANT_ANNOTATOR_REFINED

###########################################################################
###################Start of Vcf Splitter Functions#########################
###########################################################################

##################################
##### VCF BREAKOUTS AND TITV #####
##################################
##### WHOLE GENOME ###############
##################################

# This is already defined above, I just put it down here for readability

# CREATE_PROJECT_INFO_ARRAY ()
# {
# PROJECT_INFO_ARRAY=(`sed 's/\r//g' $SAMPLE_SHEET | awk 'BEGIN{FS=","} NR>1 {print $1,$12,$18,$16}' | sed 's/,/\t/g' | sort -k 1,1 | awk '$1=="'$PROJECT'" {print $1,$2,$3,$4}' | sort | uniq`)
# 
# PROJECT_NAME=${PROJECT_INFO_ARRAY[0]}
# REF_GENOME=${PROJECT_INFO_ARRAY[1]}
# PROJECT_DBSNP=${PROJECT_INFO_ARRAY[2]}
# PROJECT_BAIT_BED=${PROJECT_INFO_ARRAY[3]}
# }

CREATE_SAMPLE_INFO_ARRAY ()
{
SAMPLE_INFO_ARRAY=(`sed 's/\r//g' $SAMPLE_SHEET \
| awk 'BEGIN{FS=","} NR>1 {print $1,$8,$17,$15,$18,$12}' \
| sed 's/,/\t/g' \
| sort -k 8,8 \
| uniq \
| awk '$2=="'$SAMPLE'" {print $1,$2,$3,$4,$5,$6}'`)

PROJECT_4_SAMPLE=${SAMPLE_INFO_ARRAY[0]}
SM_TAG=${SAMPLE_INFO_ARRAY[1]}
TARGET_BED=${SAMPLE_INFO_ARRAY[2]}
TITV_BED=${SAMPLE_INFO_ARRAY[3]}
DBSNP=${SAMPLE_INFO_ARRAY[4]} #Not used unless we implement HC_BAM
SAMPLE_REF_GENOME=${SAMPLE_INFO_ARRAY[5]}

UNIQUE_ID_SM_TAG=$(echo $SM_TAG | sed 's/@/_/g') # If there is an @ in the qsub or holdId name it breaks
}

##################################
##### WHOLE GENOME ###############
##################################

EXTRACT_VCF_WHOLE_GENOME(){
echo \
 qsub $QUEUE_LIST \
 -N J01_EXTRACT_WHOLE_GENOME_$UNIQUE_ID_SM_TAG \
 -hold_jid I09_VARIANT_ANNOTATOR_REFINED_$PROJECT_NAME \
 -j y -o $CORE_PATH/$PROJECT/LOGS/J01_EXTRACT_WG_$SM_TAG.log \
 $SCRIPT_DIR/J.01_EXTRACT_VCF_WHOLE_GENOME.sh \
 $JAVA_1_7 $GATK_DIR $CORE_PATH $GATK_KEY \
 $PROJECT_NAME $PREFIX $PROJECT_4_SAMPLE $SM_TAG $SAMPLE_REF_GENOME
}

EXTRACT_VCF_WG_PASS_VARIANT(){
echo \
 qsub $QUEUE_LIST \
 -N J02_EXTRACT_VCF_WG_PASS_VARIANT_$UNIQUE_ID_SM_TAG \
 -hold_jid I09_VARIANT_ANNOTATOR_REFINED_$PROJECT_NAME \
 -j y -o $CORE_PATH/$PROJECT/LOGS/J02_EXTRACT_VCF_WG_PASS_VARIANT_$SM_TAG.log \
 $SCRIPT_DIR/J.02_EXTRACT_VCF_WG_PASS_VARIANT.sh \
 $JAVA_1_7 $GATK_DIR $CORE_PATH $GATK_KEY \
 $PROJECT_NAME $PREFIX $PROJECT_4_SAMPLE $SM_TAG $SAMPLE_REF_GENOME
}

EXTRACT_VCF_WG_PASS_ALL(){
echo \
 qsub $QUEUE_LIST \
 -N J03_EXTRACT_VCF_WG_PASS_ALL_$UNIQUE_ID_SM_TAG \
 -hold_jid I09_VARIANT_ANNOTATOR_REFINED_$PROJECT_NAME \
 -j y -o $CORE_PATH/$PROJECT/LOGS/J03_EXTRACT_VCF_WG_PASS_ALL_$SM_TAG.log \
 $SCRIPT_DIR/J.03_EXTRACT_VCF_WG_PASS_ALL.sh \
 $JAVA_1_7 $GATK_DIR $CORE_PATH $GATK_KEY \
 $PROJECT_NAME $PREFIX $PROJECT_4_SAMPLE $SM_TAG $SAMPLE_REF_GENOME
}

############################
##### WHOLE GENOME SNV #####
############################

EXTRACT_SNV_WG(){
echo \
 qsub $QUEUE_LIST \
 -N J04_EXTRACT_SNV_WG_$UNIQUE_ID_SM_TAG \
 -hold_jid I09_VARIANT_ANNOTATOR_REFINED_$PROJECT_NAME \
 -j y -o $CORE_PATH/$PROJECT/LOGS/J04_EXTRACT_SNV_WG_$SM_TAG.log \
 $SCRIPT_DIR/J.04_EXTRACT_SNV_WG.sh \
 $JAVA_1_7 $GATK_DIR $CORE_PATH $GATK_KEY \
 $PROJECT_NAME $PREFIX $PROJECT_4_SAMPLE $SM_TAG $SAMPLE_REF_GENOME
}

EXTRACT_SNV_WG_PASS_VARIANT(){
echo \
 qsub $QUEUE_LIST \
 -N J05_EXTRACT_SNV_WG_PASS_VARIANT_$UNIQUE_ID_SM_TAG \
 -hold_jid I09_VARIANT_ANNOTATOR_REFINED_$PROJECT_NAME \
 -j y -o $CORE_PATH/$PROJECT/LOGS/J05_EXTRACT_SNV_WG_PASS_VARIANT_$SM_TAG.log \
 $SCRIPT_DIR/J.05_EXTRACT_SNV_WG_PASS_VARIANT.sh \
 $JAVA_1_7 $GATK_DIR $CORE_PATH $GATK_KEY \
 $PROJECT_NAME $PREFIX $PROJECT_4_SAMPLE $SM_TAG $SAMPLE_REF_GENOME
}

EXTRACT_SNV_WG_PASS_ALL(){
echo \
 qsub $QUEUE_LIST \
 -N J06_EXTRACT_SNV_WG_PASS_ALL_$UNIQUE_ID_SM_TAG \
 -hold_jid I09_VARIANT_ANNOTATOR_REFINED_$PROJECT_NAME \
 -j y -o $CORE_PATH/$PROJECT/LOGS/J06_EXTRACT_SNV_WG_PASS_ALL_$SM_TAG.log \
 $SCRIPT_DIR/J.06_EXTRACT_SNV_WG_PASS_ALL.sh \
 $JAVA_1_7 $GATK_DIR $CORE_PATH $GATK_KEY \
 $PROJECT_NAME $PREFIX $PROJECT_4_SAMPLE $SM_TAG $SAMPLE_REF_GENOME
}

#################################################
##### WHOLE GENOME SNV TITV AND CONCORDANCE #####
#################################################

TITV_WG(){
echo \
 qsub $QUEUE_LIST \
 -N J05-A01_TITV_WG_$UNIQUE_ID_SM_TAG \
 -hold_jid J05_EXTRACT_SNV_WG_PASS_VARIANT_$UNIQUE_ID_SM_TAG \
 -j y -o $CORE_PATH/$PROJECT/LOGS/J05-A01_TITV_WG_$SM_TAG.log \
 $SCRIPT_DIR/J.05-A.01_TITV_WG.sh \
 $SAMTOOLS_DIR $CORE_PATH \
 $PROJECT_NAME $PROJECT_4_SAMPLE $SM_TAG
}

EXTRACT_WG_KNOWN(){
echo \
 qsub $QUEUE_LIST \
 -N J05-A02_EXTRACT_WG_KNOWN_$UNIQUE_ID_SM_TAG \
 -hold_jid J05_EXTRACT_SNV_WG_PASS_VARIANT_$UNIQUE_ID_SM_TAG \
 -j y -o $CORE_PATH/$PROJECT/LOGS/J05-A02_EXTRACT_WG_KNOWN_$SM_TAG.log \
 $SCRIPT_DIR/J.05-A.02_EXTRACT_WG_KNOWN.sh \
 $JAVA_1_7 $GATK_DIR $CORE_PATH $DBSNP_129 $GATK_KEY \
 $PROJECT_NAME $PROJECT_4_SAMPLE $SM_TAG $SAMPLE_REF_GENOME
}

TITV_WG_KNOWN(){
echo \
 qsub $QUEUE_LIST \
 -N J05-A02-A01_TITV_WG_KNOWN_$UNIQUE_ID_SM_TAG \
 -hold_jid J05-A02_EXTRACT_WG_KNOWN_$UNIQUE_ID_SM_TAG \
 -j y -o $CORE_PATH/$PROJECT/LOGS/J05-A02-A01_TITV_WG_KNOWN_$SM_TAG.log \
 $SCRIPT_DIR/J.05-A.02-A.01_TITV_WG_KNOWN.sh \
 $SAMTOOLS_DIR $CORE_PATH \
 $PROJECT_NAME $PROJECT_4_SAMPLE $SM_TAG
}

EXTRACT_WG_NOVEL(){
echo \
 qsub $QUEUE_LIST \
 -N J05-A03_EXTRACT_WG_NOVEL_$UNIQUE_ID_SM_TAG \
 -hold_jid J05_EXTRACT_SNV_WG_PASS_VARIANT_$UNIQUE_ID_SM_TAG \
 -j y -o $CORE_PATH/$PROJECT/LOGS/J05-A03_EXTRACT_WG_NOVEL_$SM_TAG.log \
 $SCRIPT_DIR/J.05-A.03_EXTRACT_WG_NOVEL.sh \
 $JAVA_1_7 $GATK_DIR $CORE_PATH $DBSNP_129 $GATK_KEY \
 $PROJECT_NAME $PROJECT_4_SAMPLE $SM_TAG $SAMPLE_REF_GENOME
}

TITV_WG_NOVEL(){
echo \
 qsub $QUEUE_LIST \
 -N J05-A03-A01_TITV_WG_NOVEL_$UNIQUE_ID_SM_TAG \
 -hold_jid J05-A03_EXTRACT_WG_NOVEL_$UNIQUE_ID_SM_TAG \
 -j y -o $CORE_PATH/$PROJECT/LOGS/J05-A03-A01_TITV_WG_NOVEL_$SM_TAG.log \
 $SCRIPT_DIR/J.05-A.03-A.01_TITV_WG_NOVEL.sh \
 $SAMTOOLS_DIR $CORE_PATH \
 $PROJECT_NAME $PROJECT_4_SAMPLE $SM_TAG
}

CONCORDANCE_WG(){
echo \
 qsub $QUEUE_LIST \
 -N J05-A04_CONCORDANCE_WG_$UNIQUE_ID_SM_TAG \
 -hold_jid J05_EXTRACT_SNV_WG_PASS_VARIANT_$UNIQUE_ID_SM_TAG \
 -j y -o $CORE_PATH/$PROJECT/LOGS/J05-A04_CONCORDANCE_WG_$SM_TAG.log \
 $SCRIPT_DIR/J.05-A.04_CONCORDANCE_WG.sh \
 $JAVA_CIDRSEQSUITE $CIDRSEQSUITE_6_1_1_DIR $CORE_PATH $NO_GAP_BED $VERACODE \
 $PROJECT_NAME $PROJECT_4_SAMPLE $SM_TAG
}

##################
##### CODING #####
##################

EXTRACT_VCF_CODING(){
echo \
 qsub $QUEUE_LIST \
 -N J07_EXTRACT_VCF_CODING_$UNIQUE_ID_SM_TAG \
 -hold_jid I09_VARIANT_ANNOTATOR_REFINED_$PROJECT_NAME \
 -j y -o $CORE_PATH/$PROJECT/LOGS/J07_EXTRACT_VCF_CODING_$SM_TAG.log \
 $SCRIPT_DIR/J.07_EXTRACT_VCF_CODING.sh \
 $JAVA_1_7 $GATK_DIR $CORE_PATH $CODING_BED $CODING_BED_MT $GATK_KEY \
 $PROJECT_NAME $PREFIX $PROJECT_4_SAMPLE $SM_TAG $SAMPLE_REF_GENOME
}

EXTRACT_VCF_CODING_PASS_VARIANT(){
echo \
 qsub $QUEUE_LIST \
 -N J08_EXTRACT_VCF_CODING_PASS_VARIANT_$UNIQUE_ID_SM_TAG \
 -hold_jid I09_VARIANT_ANNOTATOR_REFINED_$PROJECT_NAME \
 -j y -o $CORE_PATH/$PROJECT/LOGS/J08_EXTRACT_VCF_CODING_PASS_VARIANT_$SM_TAG.log \
 $SCRIPT_DIR/J.08_EXTRACT_VCF_CODING_PASS_VARIANT.sh \
 $JAVA_1_7 $GATK_DIR $CORE_PATH $CODING_BED $CODING_BED_MT $GATK_KEY \
 $PROJECT_NAME $PREFIX $PROJECT_4_SAMPLE $SM_TAG $SAMPLE_REF_GENOME
}

EXTRACT_VCF_CODING_PASS_ALL(){
echo \
 qsub $QUEUE_LIST \
 -N J09_EXTRACT_VCF_CODING_PASS_ALL_$UNIQUE_ID_SM_TAG \
 -hold_jid I09_VARIANT_ANNOTATOR_REFINED_$PROJECT_NAME \
 -j y -o $CORE_PATH/$PROJECT/LOGS/J09_EXTRACT_VCF_CODING_PASS_ALL_$SM_TAG.log \
 $SCRIPT_DIR/J.09_EXTRACT_VCF_CODING_PASS_ALL.sh \
 $JAVA_1_7 $GATK_DIR $CORE_PATH $CODING_BED $CODING_BED_MT $GATK_KEY \
 $PROJECT_NAME $PREFIX $PROJECT_4_SAMPLE $SM_TAG $SAMPLE_REF_GENOME
}

######################
##### CODING SNV #####
######################

EXTRACT_SNV_CODING(){
echo \
 qsub $QUEUE_LIST \
 -N J10_EXTRACT_SNV_CODING_$UNIQUE_ID_SM_TAG \
 -hold_jid I09_VARIANT_ANNOTATOR_REFINED_$PROJECT_NAME \
 -j y -o $CORE_PATH/$PROJECT/LOGS/J10_EXTRACT_SNV_CODING_$SM_TAG.log \
 $SCRIPT_DIR/J.10_EXTRACT_SNV_CODING.sh \
 $JAVA_1_7 $GATK_DIR $CORE_PATH $CODING_BED $CODING_BED_MT $GATK_KEY \
 $PROJECT_NAME $PREFIX $PROJECT_4_SAMPLE $SM_TAG $SAMPLE_REF_GENOME
}

EXTRACT_SNV_CODING_PASS_VARIANT(){
echo \
 qsub $QUEUE_LIST \
 -N J11_EXTRACT_SNV_CODING_PASS_VARIANT_$UNIQUE_ID_SM_TAG \
 -hold_jid I09_VARIANT_ANNOTATOR_REFINED_$PROJECT_NAME \
 -j y -o $CORE_PATH/$PROJECT/LOGS/J11_EXTRACT_SNV_CODING_PASS_VARIANT_$SM_TAG.log \
 $SCRIPT_DIR/J.11_EXTRACT_SNV_CODING_PASS_VARIANT.sh \
 $JAVA_1_7 $GATK_DIR $CORE_PATH $CODING_BED $CODING_BED_MT $GATK_KEY \
 $PROJECT_NAME $PREFIX $PROJECT_4_SAMPLE $SM_TAG $SAMPLE_REF_GENOME
}

EXTRACT_SNV_CODING_PASS_ALL(){
echo \
 qsub $QUEUE_LIST \
 -N J12_EXTRACT_SNV_CODING_PASS_ALL_$UNIQUE_ID_SM_TAG \
 -hold_jid I09_VARIANT_ANNOTATOR_REFINED_$PROJECT_NAME \
 -j y -o $CORE_PATH/$PROJECT/LOGS/J12_EXTRACT_SNV_CODING_PASS_ALL_$SM_TAG.log \
 $SCRIPT_DIR/J.12_EXTRACT_SNV_CODING_PASS_ALL.sh \
 $JAVA_1_7 $GATK_DIR $CORE_PATH $CODING_BED $CODING_BED_MT $GATK_KEY \
 $PROJECT_NAME $PREFIX $PROJECT_4_SAMPLE $SM_TAG $SAMPLE_REF_GENOME
}

###########################
##### CODING SNV TITV #####
###########################

TITV_CODING(){
echo \
 qsub $QUEUE_LIST \
 -N J11-A01_TITV_CODING_$UNIQUE_ID_SM_TAG \
 -hold_jid J11_EXTRACT_SNV_CODING_PASS_VARIANT_$UNIQUE_ID_SM_TAG \
 -j y -o $CORE_PATH/$PROJECT/LOGS/J11-A01_TITV_CODING_$SM_TAG.log \
 $SCRIPT_DIR/J.11-A.01_TITV_CODING.sh \
 $SAMTOOLS_DIR $CORE_PATH \
 $PROJECT_NAME $PROJECT_4_SAMPLE $SM_TAG
}

EXTRACT_CODING_KNOWN(){
echo \
 qsub $QUEUE_LIST \
 -N J11-A02_EXTRACT_CODING_KNOWN_$UNIQUE_ID_SM_TAG \
 -hold_jid J11_EXTRACT_SNV_CODING_PASS_VARIANT_$UNIQUE_ID_SM_TAG \
 -j y -o $CORE_PATH/$PROJECT/LOGS/J11-A02_EXTRACT_CODING_KNOWN_$SM_TAG.log \
 $SCRIPT_DIR/J.11-A.02_EXTRACT_CODING_KNOWN.sh \
 $JAVA_1_7 $GATK_DIR $CORE_PATH $DBSNP_129 $GATK_KEY \
 $PROJECT_NAME $PROJECT_4_SAMPLE $SM_TAG $SAMPLE_REF_GENOME
}

TITV_CODING_KNOWN(){
echo \
 qsub $QUEUE_LIST \
 -N J11-A02-A01_TITV_CODING_KNOWN_$UNIQUE_ID_SM_TAG \
 -hold_jid J11-A02_EXTRACT_CODING_KNOWN_$UNIQUE_ID_SM_TAG \
 -j y -o $CORE_PATH/$PROJECT/LOGS/J11-A02-A01_TITV_CODING_KNOWN_$SM_TAG.log \
 $SCRIPT_DIR/J.11-A.02-A.01_TITV_CODING_KNOWN.sh \
 $SAMTOOLS_DIR $CORE_PATH \
 $PROJECT_NAME $PROJECT_4_SAMPLE $SM_TAG
}

EXTRACT_CODING_NOVEL(){
echo \
 qsub $QUEUE_LIST \
 -N J11-A03_EXTRACT_CODING_NOVEL_$UNIQUE_ID_SM_TAG \
 -hold_jid J11_EXTRACT_SNV_CODING_PASS_VARIANT_$UNIQUE_ID_SM_TAG \
 -j y -o $CORE_PATH/$PROJECT/LOGS/J11-A03_TITV_CODING_$SM_TAG.log \
 $SCRIPT_DIR/J.11-A.03_EXTRACT_CODING_NOVEL.sh \
 $JAVA_1_7 $GATK_DIR $CORE_PATH $DBSNP_129 $GATK_KEY \
 $PROJECT_NAME $PROJECT_4_SAMPLE $SM_TAG $SAMPLE_REF_GENOME
}

TITV_CODING_NOVEL(){
echo \
 qsub $QUEUE_LIST \
 -N J11-A03-A01_TITV_CODING_NOVEL_$UNIQUE_ID_SM_TAG \
 -hold_jid J11-A03_EXTRACT_CODING_NOVEL_$UNIQUE_ID_SM_TAG \
 -j y -o $CORE_PATH/$PROJECT/LOGS/J11-A03-A01_TITV_CODING_NOVEL_$SM_TAG.log \
 $SCRIPT_DIR/J.11-A.03-A.01_TITV_CODING_NOVEL.sh \
 $SAMTOOLS_DIR $CORE_PATH \
 $PROJECT_NAME $PROJECT_4_SAMPLE $SM_TAG
}

# ##############################
# ##### WHOLE GENOME INDEL #####
# ##############################

EXTRACT_INDEL_WHOLE_GENOME(){
echo \
 qsub $QUEUE_LIST \
 -N J13_EXTRACT_INDEL_WHOLE_GENOME_$UNIQUE_ID_SM_TAG \
 -hold_jid I09_VARIANT_ANNOTATOR_REFINED_$PROJECT_NAME \
 -j y -o $CORE_PATH/$PROJECT/LOGS/J13_EXTRACT_INDEL_WG_$SM_TAG.log \
 $SCRIPT_DIR/J.13_EXTRACT_INDEL_WG.sh \
 $JAVA_1_7 $GATK_DIR $CORE_PATH $GATK_KEY \
 $PROJECT_NAME $PREFIX $PROJECT_4_SAMPLE $SM_TAG $SAMPLE_REF_GENOME
}

EXTRACT_INDEL_WG_PASS_VARIANT(){
echo \
 qsub $QUEUE_LIST \
 -N J14_EXTRACT_INDEL_WG_PASS_VARIANT_$UNIQUE_ID_SM_TAG \
 -hold_jid I09_VARIANT_ANNOTATOR_REFINED_$PROJECT_NAME \
 -j y -o $CORE_PATH/$PROJECT/LOGS/J14_EXTRACT_INDEL_WG_PASS_VARIANT_$SM_TAG.log \
 $SCRIPT_DIR/J.14_EXTRACT_INDEL_WG_PASS_VARIANT.sh \
 $JAVA_1_7 $GATK_DIR $CORE_PATH $GATK_KEY \
 $PROJECT_NAME $PREFIX $PROJECT_4_SAMPLE $SM_TAG $SAMPLE_REF_GENOME
}

EXTRACT_INDEL_WG_PASS_ALL(){
echo \
 qsub $QUEUE_LIST \
 -N J15_EXTRACT_INDEL_WG_PASS_ALL_$UNIQUE_ID_SM_TAG \
 -hold_jid I09_VARIANT_ANNOTATOR_REFINED_$PROJECT_NAME \
 -j y -o $CORE_PATH/$PROJECT/LOGS/J15_EXTRACT_INDEL_WG_PASS_ALL_$SM_TAG.log \
 $SCRIPT_DIR/J.15_EXTRACT_INDEL_WG_PASS_ALL.sh \
 $JAVA_1_7 $GATK_DIR $CORE_PATH $GATK_KEY \
 $PROJECT_NAME $PREFIX $PROJECT_4_SAMPLE $SM_TAG $SAMPLE_REF_GENOME
}

# ########################
# ##### CODING INDEL #####
# ########################

EXTRACT_INDEL_CODING(){
echo \
 qsub $QUEUE_LIST \
 -N J16_EXTRACT_INDEL_CODING_$UNIQUE_ID_SM_TAG \
 -hold_jid I09_VARIANT_ANNOTATOR_REFINED_$PROJECT_NAME \
 -j y -o $CORE_PATH/$PROJECT/LOGS/J16_EXTRACT_INDEL_CODING_$SM_TAG.log \
 $SCRIPT_DIR/J.16_EXTRACT_INDEL_CODING.sh \
 $JAVA_1_7 $GATK_DIR $CORE_PATH $CODING_BED $CODING_BED_MT $GATK_KEY \
 $PROJECT_NAME $PREFIX $PROJECT_4_SAMPLE $SM_TAG $SAMPLE_REF_GENOME
}

EXTRACT_INDEL_CODING_PASS_VARIANT(){
echo \
 qsub $QUEUE_LIST \
 -N J17_EXTRACT_INDEL_CODING_PASS_VARIANT_$UNIQUE_ID_SM_TAG \
 -hold_jid I09_VARIANT_ANNOTATOR_REFINED_$PROJECT_NAME \
 -j y -o $CORE_PATH/$PROJECT/LOGS/J17_EXTRACT_INDEL_CODING_PASS_VARIANT_$SM_TAG.log \
 $SCRIPT_DIR/J.17_EXTRACT_INDEL_CODING_PASS_VARIANT.sh \
 $JAVA_1_7 $GATK_DIR $CORE_PATH $CODING_BED $CODING_BED_MT $GATK_KEY \
 $PROJECT_NAME $PREFIX $PROJECT_4_SAMPLE $SM_TAG $SAMPLE_REF_GENOME
}

EXTRACT_INDEL_CODING_PASS_ALL(){
echo \
 qsub $QUEUE_LIST \
 -N J18_EXTRACT_INDEL_CODING_PASS_ALL_$UNIQUE_ID_SM_TAG \
 -hold_jid I09_VARIANT_ANNOTATOR_REFINED_$PROJECT_NAME \
 -j y -o $CORE_PATH/$PROJECT/LOGS/J18_EXTRACT_INDEL_CODING_PASS_ALL_$SM_TAG.log \
 $SCRIPT_DIR/J.18_EXTRACT_INDEL_CODING_PASS_ALL.sh \
 $JAVA_1_7 $GATK_DIR $CORE_PATH $CODING_BED $CODING_BED_MT $GATK_KEY \
 $PROJECT_NAME $PREFIX $PROJECT_4_SAMPLE $SM_TAG $SAMPLE_REF_GENOME
}

# ##############################
# ##### WHOLE GENOME MIXED #####
# ##############################

EXTRACT_MIXED_WHOLE_GENOME(){
echo \
 qsub $QUEUE_LIST \
 -N J19_EXTRACT_MIXED_WHOLE_GENOME_$UNIQUE_ID_SM_TAG \
 -hold_jid I09_VARIANT_ANNOTATOR_REFINED_$PROJECT_NAME \
 -j y -o $CORE_PATH/$PROJECT/LOGS/J19_EXTRACT_MIXED_WG_$SM_TAG.log \
 $SCRIPT_DIR/J.19_EXTRACT_MIXED_WG.sh \
 $JAVA_1_7 $GATK_DIR $CORE_PATH $GATK_KEY \
 $PROJECT_NAME $PREFIX $PROJECT_4_SAMPLE $SM_TAG $SAMPLE_REF_GENOME
}

EXTRACT_MIXED_WG_PASS_VARIANT(){
echo \
 qsub $QUEUE_LIST \
 -N J20_EXTRACT_MIXED_WG_PASS_VARIANT_$UNIQUE_ID_SM_TAG \
 -hold_jid I09_VARIANT_ANNOTATOR_REFINED_$PROJECT_NAME \
 -j y -o $CORE_PATH/$PROJECT/LOGS/J20_EXTRACT_MIXED_WG_PASS_VARIANT_$SM_TAG.log \
 $SCRIPT_DIR/J.20_EXTRACT_MIXED_WG_PASS_VARIANT.sh \
 $JAVA_1_7 $GATK_DIR $CORE_PATH $GATK_KEY \
 $PROJECT_NAME $PREFIX $PROJECT_4_SAMPLE $SM_TAG $SAMPLE_REF_GENOME
}

EXTRACT_MIXED_WG_PASS_ALL(){
echo \
 qsub $QUEUE_LIST \
 -N J21_EXTRACT_MIXED_WG_PASS_ALL_$UNIQUE_ID_SM_TAG \
 -hold_jid I09_VARIANT_ANNOTATOR_REFINED_$PROJECT_NAME \
 -j y -o $CORE_PATH/$PROJECT/LOGS/J21_EXTRACT_MIXED_WG_PASS_ALL_$SM_TAG.log \
 $SCRIPT_DIR/J.21_EXTRACT_MIXED_WG_PASS_ALL.sh \
 $JAVA_1_7 $GATK_DIR $CORE_PATH $GATK_KEY \
 $PROJECT_NAME $PREFIX $PROJECT_4_SAMPLE $SM_TAG $SAMPLE_REF_GENOME
}

# ########################
# ##### CODING MIXED #####
# ########################

EXTRACT_MIXED_CODING(){
echo \
 qsub $QUEUE_LIST \
 -N J22_EXTRACT_MIXED_CODING_$UNIQUE_ID_SM_TAG \
 -hold_jid I09_VARIANT_ANNOTATOR_REFINED_$PROJECT_NAME \
 -j y -o $CORE_PATH/$PROJECT/LOGS/J22_EXTRACT_MIXED_CODING_$SM_TAG.log \
 $SCRIPT_DIR/J.22_EXTRACT_MIXED_CODING.sh \
 $JAVA_1_7 $GATK_DIR $CORE_PATH $CODING_BED $CODING_BED_MT $GATK_KEY \
 $PROJECT_NAME $PREFIX $PROJECT_4_SAMPLE $SM_TAG $SAMPLE_REF_GENOME
}

EXTRACT_MIXED_CODING_PASS_VARIANT(){
echo \
 qsub $QUEUE_LIST \
 -N J23_EXTRACT_MIXED_CODING_PASS_VARIANT_$UNIQUE_ID_SM_TAG \
 -hold_jid I09_VARIANT_ANNOTATOR_REFINED_$PROJECT_NAME \
 -j y -o $CORE_PATH/$PROJECT/LOGS/J23_EXTRACT_MIXED_CODING_PASS_VARIANT_$SM_TAG.log \
 $SCRIPT_DIR/J.23_EXTRACT_MIXED_CODING_PASS_VARIANT.sh \
 $JAVA_1_7 $GATK_DIR $CORE_PATH $CODING_BED $CODING_BED_MT $GATK_KEY \
 $PROJECT_NAME $PREFIX $PROJECT_4_SAMPLE $SM_TAG $SAMPLE_REF_GENOME
}

EXTRACT_MIXED_CODING_PASS_ALL(){
echo \
 qsub $QUEUE_LIST \
 -N J24_EXTRACT_MIXED_CODING_PASS_ALL_$UNIQUE_ID_SM_TAG \
 -hold_jid I09_VARIANT_ANNOTATOR_REFINED_$PROJECT_NAME \
 -j y -o $CORE_PATH/$PROJECT/LOGS/J24_EXTRACT_MIXED_CODING_PASS_ALL_$SM_TAG.log \
 $SCRIPT_DIR/J.24_EXTRACT_MIXED_CODING_PASS_ALL.sh \
 $JAVA_1_7 $GATK_DIR $CORE_PATH $CODING_BED $CODING_BED_MT $GATK_KEY \
 $PROJECT_NAME $PREFIX $PROJECT_4_SAMPLE $SM_TAG $SAMPLE_REF_GENOME
}

for SAMPLE in $(awk 'BEGIN {FS=","} NR>1 {print $8}' $SAMPLE_SHEET | sort | uniq )
do
CREATE_PROJECT_INFO_ARRAY
CREATE_SAMPLE_INFO_ARRAY
EXTRACT_VCF_WHOLE_GENOME
echo sleep 0.1s
EXTRACT_VCF_WG_PASS_VARIANT
echo sleep 0.1s
EXTRACT_VCF_WG_PASS_ALL
echo sleep 0.1s
EXTRACT_SNV_WG
echo sleep 0.1s
EXTRACT_SNV_WG_PASS_VARIANT
echo sleep 0.1s
EXTRACT_SNV_WG_PASS_ALL
echo sleep 0.1s
TITV_WG
echo sleep 0.1s
EXTRACT_WG_KNOWN
echo sleep 0.1s
TITV_WG_KNOWN
echo sleep 0.1s
EXTRACT_WG_NOVEL
echo sleep 0.1s
TITV_WG_NOVEL
echo sleep 0.1s
CONCORDANCE_WG
echo sleep 0.1s
EXTRACT_VCF_CODING
echo sleep 0.1s
EXTRACT_VCF_CODING_PASS_VARIANT
echo sleep 0.1s
EXTRACT_VCF_CODING_PASS_ALL
echo sleep 0.1s
EXTRACT_SNV_CODING
echo sleep 0.1s
EXTRACT_SNV_CODING_PASS_VARIANT
echo sleep 0.1s
EXTRACT_SNV_CODING_PASS_ALL
echo sleep 0.1s
TITV_CODING
echo sleep 0.1s
EXTRACT_CODING_KNOWN
echo sleep 0.1s
TITV_CODING_KNOWN
echo sleep 0.1s
EXTRACT_CODING_NOVEL
echo sleep 0.1s
TITV_CODING_NOVEL
echo sleep 0.1s
EXTRACT_INDEL_WHOLE_GENOME
echo sleep 0.1s
EXTRACT_INDEL_WG_PASS_VARIANT
echo sleep 0.1s
EXTRACT_INDEL_WG_PASS_ALL
echo sleep 0.1s
EXTRACT_INDEL_CODING
echo sleep 0.1s
EXTRACT_INDEL_CODING_PASS_VARIANT
echo sleep 0.1s
EXTRACT_INDEL_CODING_PASS_ALL
echo sleep 0.1s
EXTRACT_MIXED_WHOLE_GENOME
echo sleep 0.1s
EXTRACT_MIXED_WG_PASS_VARIANT
echo sleep 0.1s
EXTRACT_MIXED_WG_PASS_ALL
echo sleep 0.1s
EXTRACT_MIXED_CODING
echo sleep 0.1s
EXTRACT_MIXED_CODING_PASS_VARIANT
echo sleep 0.1s
EXTRACT_MIXED_CODING_PASS_ALL
done
